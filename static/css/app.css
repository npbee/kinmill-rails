@charset "UTF-8";
/**
 * Mixins
 */
/**
 * Config
 **/
/**********
* SUSY
**********/
/**********
* Breakpoints
**********/
/**********
* Typecsset
**********/
/**********
* Colors
**********/
/*****
 * Spacing
 ****/
/*****
 * Fonts
 ****/
/*****
 * Navigation
 ****/
/**
 * Reset
 */
/* http://meyerweb.com/eric/tools/css/reset/ 
v2.0 | 20110126
License: none (public domain)
 */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/** 
 * Base
 */
body {
  padding: 10px;
  background: #f9f9f9;
  color: #333333; }

/**
 * Typography
 */
/**
 * Typecsset
 *
 * Typecsset is a small, unopinionated library for creating beautifully set type
 * on the web. Typecsset gives perfect vertical rhythm at any configurable font
 * size, as well as many other typographical niceties.
 */
/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * A lot of elements in Typecsset need to share some declarations (mainly for
 * vertical rhythm), so we `@extend` some silent classes.
 */
h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

/*------------------------------------*\
    #BASE
\*------------------------------------*/
/**
 * 1. Set the base element’s `font-size` to the value of your choosing. Set in
 *    ems, assuming a browser default of 16px.
 * 2. Work out the unitless `line-height` for your project based around your
 *    desired `line-height` (defined previously in pixels), and your project’s
 *    base font size.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [2] */ }

body {
  margin: 0; }

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
h1 {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

h2 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h3 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h4 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h5 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h6 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/*------------------------------------*\
    #LISTS
\*------------------------------------*/
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    #PARAGRAPHS
\*------------------------------------*/
/**
 * Not strictly a paragraph, but probably doesn’t need its own section.
 */
/*------------------------------------*\
    #CODE
\*------------------------------------*/
/**
 * 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
 *    font-size smaller than 1em.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* [1] */ }

/*------------------------------------*\
    #QUOTES
\*------------------------------------*/
/**
 * 1. Hang the opening quote of the blockquote.
 */
blockquote {
  text-indent: -0.41em;
  /* [1] */ }

/**
 * Set up quote marks on quoting elements. This is very English-based, so we are
 * using “, ”, ‘, and ’ quotes.
 */
blockquote {
  quotes: "“" "”";
  margin-left: 48px;
  margin-left: 3rem; }
  blockquote p:before {
    content: "“";
    content: open-quote; }
  blockquote p:after {
    content: "";
    content: no-close-quote; }
  blockquote p:last-of-type:after {
    content: "”";
    content: close-quote; }

q {
  quotes: "‘" "’" "“" "”";
  /**
   * If an element opens with an inline quote, let’s hang that.
   */ }
  q:before {
    content: "‘";
    content: open-quote; }
  q:after {
    content: "’";
    content: close-quote; }
  q q:before {
    content: "“";
    content: open-quote; }
  q q:after {
    content: "”";
    content: close-quote; }
  q:first-child {
    display: inline-block;
    text-indent: -0.22em; }

/*------------------------------------*\
    #TABLES
\*------------------------------------*/
/**
 * Crude table styles; tables are very difficult to keep on the baseline.
 */
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0; }

th,
td {
  padding: 12px; }

html, body {
  font-family: "Chronicle Display A", "Chronicle Display B";
  font-weight: 200;
  font-style: normal; }

h1, h2, h3,
h4, h5, h6 {
  font-family: "Landmark Regular A", "Landmark Regular B";
  font-weight: 400;
  font-style: normal; }

a:not(.button) {
  text-decoration: none;
  color: inherit; }
  a:not(.button):hover {
    color: #ce6d7c; }

.rule {
  border: none;
  outline: none;
  height: 1px;
  background: #d9d9d9;
  /*margin: $typecsset-base-line-height 0;*/
  margin-top: 48px;
  margin-top: 3rem;
  margin-bottom: 48px;
  margin-bottom: 3rem; }

.rule--small {
  max-width: 30%;
  margin-left: auto;
  margin-right: auto; }

/******************************
* ICONS
******************************/
.icon {
  max-width: 20px;
  vertical-align: middle; }

/**
 * Layout
 */
main {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  main:after {
    content: " ";
    display: block;
    clear: both; }

.skinny {
  margin: 0 auto;
  max-width: 700px; }

/**
 * Modules
 */
.grid {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  /*display: map-get($settings, display);*/ }
  .grid:after {
    content: " ";
    display: block;
    clear: both; }

@media screen and (min-width: 50em) {
  .grid--centered .grid--left {
    text-align: right; } }

@media screen and (min-width: 50em) {
  .grid--1-4 {
    width: 23.40426%;
    float: left;
    margin-right: 2.12766%;
    line-height: 1; } }

@media screen and (min-width: 50em) {
  .grid--1-2 {
    width: 48.93617%;
    float: left;
    margin-right: 2.12766%;
    line-height: 1; } }

@media screen and (min-width: 50em) {
  .grid--push-1-4 {
    margin-left: 25.53191%; } }

@media screen and (min-width: 50em) {
  .grid--last {
    float: right;
    margin-right: 0; } }

/******************************
* $NAVIGATION
******************************/
.main-nav {
  align-items: center;
  display: flex;
  height: 50px;
  justify-content: space-between;
  padding-bottom: 24px; }
  @media screen and (min-width: 50em) {
    .main-nav {
      justify-content: flex-start; } }
  .main-nav .site-logo {
    padding-right: 10px;
    z-index: 2; }
    .main-nav .site-logo img {
      align-self: flex-start;
      max-width: 35px; }
  .main-nav .main-nav__toggle {
    z-index: 2; }
    @media screen and (min-width: 50em) {
      .main-nav .main-nav__toggle {
        display: none; } }
  .main-nav a:not(.site-logo) {
    padding-left: 10px;
    padding-right: 10px; }
  .main-nav .main-nav__social {
    margin-left: auto; }
    .main-nav .main-nav__social img {
      max-width: 20px;
      vertical-align: middle; }

/*
* MOBILE NAVIGATION
******************************/
.main-nav__menu {
  font-family: "Landmark Regular A", "Landmark Regular B";
  font-size: 30px;
  height: 80%;
  left: 0;
  padding-top: 74px;
  top: 0; }
  .main-nav__menu a {
    display: block;
    padding-bottom: 24px; }
    @media screen and (min-width: 50em) {
      .main-nav__menu a {
        display: inline; } }
  @media screen and (min-width: 50em) {
    .main-nav__menu {
      height: auto;
      padding-top: 0; } }

.main-nav__social {
  top: 80%;
  height: 20%; }

.main-nav__menu,
.main-nav__social {
  left: 0;
  position: absolute;
  width: 100%;
  background: rgba(249, 249, 249, 0.9); }
  @media screen and (min-width: 50em) {
    .main-nav__menu,
    .main-nav__social {
      background: none;
      display: block;
      font-family: "Chronicle Display A", "Chronicle Display B";
      font-size: 16px;
      position: static;
      width: auto; } }

.snippet {
  display: block;
  margin-bottom: 24px;
  text-align: center; }
  @media screen and (min-width: 50em) {
    .snippet {
      text-align: left; } }
  .snippet .snippet__tagline {
    font-size: 18px;
    margin-bottom: 0; }
  .snippet .snippet__item {
    font-style: italic; }

.tagline {
  font-family: "Landmark Inline A", "Landmark Inline B";
  font-weight: 400;
  font-size: 36px;
  text-align: center; }
  @media screen and (min-width: 50em) {
    .tagline {
      text-align: left; }
      .tagline .tagline__item {
        margin-bottom: 10px; } }

.avatar {
  font-size: 12.8px;
  text-align: center;
  margin-bottom: 24px; }
  @media screen and (min-width: 50em) {
    .avatar {
      margin-bottom: auto; } }

.avatar__image {
  max-width: 50%;
  margin-bottom: 24px; }
  @media screen and (min-width: 50em) {
    .avatar__image {
      margin-bottom: 10px;
      max-width: 90px; } }

.avatar__summary__item {
  margin-bottom: 5px; }

.avatar__summary__position {
  font-style: italic;
  font-weight: normal; }

/**
 * Page Specific
 */
.home {
  margin-top: 48px;
  margin-top: 3rem; }



/*# sourceMappingURL=data:application/json;base64, */