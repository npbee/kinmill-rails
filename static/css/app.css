@charset "UTF-8";
/**
 * Config
 **/
/**********
* SUSY
**********/
/**********
* Breakpoints
**********/
/**********
* Typecsset
**********/
/**********
* Colors
**********/
/*****
 * Spacing
 ****/
/*****
 * Fonts
 ****/
/*****
 * Navigation
 ****/
/*****
 * Animation
 ****/
/*****
 * Round
 ****/
/**
 * Mixins
 */
@-webkit-keyframes slide-in-from-left {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
            transform: translate3d(-100%, 0, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
    z-index: 1; } }
@keyframes slide-in-from-left {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
            transform: translate3d(-100%, 0, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
    z-index: 1; } }
@-webkit-keyframes slide-out-to-left {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
            transform: translate3d(-100%, 0, 0);
    z-index: -1; } }
@keyframes slide-out-to-left {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
            transform: translate3d(-100%, 0, 0);
    z-index: -1; } }
@-webkit-keyframes slide-up {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(0, 0%, 0);
            transform: translate3d(0, 0%, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
            transform: translate3d(0, -100%, 0);
    z-index: -1; } }
@keyframes slide-up {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(0, 0%, 0);
            transform: translate3d(0, 0%, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
            transform: translate3d(0, -100%, 0);
    z-index: -1; } }
@-webkit-keyframes slide-down {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
            transform: translate3d(0, -100%, 0);
    z-index: -1; }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(0, 0%, 0);
            transform: translate3d(0, 0%, 0); } }
@keyframes slide-down {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
            transform: translate3d(0, -100%, 0);
    z-index: -1; }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(0, 0%, 0);
            transform: translate3d(0, 0%, 0); } }
@-webkit-keyframes slide-in-from-right {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
            transform: translate3d(100%, 0, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
    z-index: 1; } }
@keyframes slide-in-from-right {
  0% {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
            transform: translate3d(100%, 0, 0); }
  100% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
    z-index: 1; } }
@-webkit-keyframes slide-out-to-right {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0); }
  95% {
    -webkit-transform: translate3d(100%, 0, 0);
            transform: translate3d(100%, 0, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
    z-index: -1; } }
@keyframes slide-out-to-right {
  0% {
    opacity: 1;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0); }
  95% {
    -webkit-transform: translate3d(100%, 0, 0);
            transform: translate3d(100%, 0, 0); }
  100% {
    opacity: 0;
    -webkit-transform: translate3d(0%, 0, 0);
            transform: translate3d(0%, 0, 0);
    z-index: -1; } }
/*
* REACT ANIMATIONS
******************************/
.fade-enter {
  max-height: 0;
  opacity: 0;
  transition: opacity 300ms, max-heigh 300ms; }

.fade-enter.fade-enter-active {
  opacity: 1;
  max-height: 500px; }

.fade-leave {
  max-height: 500px;
  opacity: 1;
  transition: opacity 300ms, max-heigh 300ms; }

.fade-leave.fade-leave-active {
  max-height: 0;
  opacity: 0; }

/**
 * Reset
 */
/* http://meyerweb.com/eric/tools/css/reset/ 
v2.0 | 20110126
License: none (public domain)
 */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  /*line-height: 1;*/ }

ol, ul {
  /*list-style: none;*/ }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/** 
 * Base
 */
body {
  background: #f9f9f9;
  color: #333333;
  padding: 24px; }

/**
 * Typography
 */
/**
 * Typecsset
 *
 * Typecsset is a small, unopinionated library for creating beautifully set type
 * on the web. Typecsset gives perfect vertical rhythm at any configurable font
 * size, as well as many other typographical niceties.
 */
/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * A lot of elements in Typecsset need to share some declarations (mainly for
 * vertical rhythm), so we `@extend` some silent classes.
 */
h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

/*------------------------------------*\
    #BASE
\*------------------------------------*/
/**
 * 1. Set the base element’s `font-size` to the value of your choosing. Set in
 *    ems, assuming a browser default of 16px.
 * 2. Work out the unitless `line-height` for your project based around your
 *    desired `line-height` (defined previously in pixels), and your project’s
 *    base font size.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [2] */ }

body {
  margin: 0; }

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
h1 {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

h2 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h3 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h4 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h5 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h6 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/*------------------------------------*\
    #LISTS
\*------------------------------------*/
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    #PARAGRAPHS
\*------------------------------------*/
/**
 * Not strictly a paragraph, but probably doesn’t need its own section.
 */
/*------------------------------------*\
    #CODE
\*------------------------------------*/
/**
 * 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
 *    font-size smaller than 1em.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* [1] */ }

/*------------------------------------*\
    #QUOTES
\*------------------------------------*/
/**
 * 1. Hang the opening quote of the blockquote.
 */
blockquote {
  text-indent: -0.41em;
  /* [1] */ }

/**
 * Set up quote marks on quoting elements. This is very English-based, so we are
 * using “, ”, ‘, and ’ quotes.
 */
blockquote {
  quotes: "“" "”";
  margin-left: 48px;
  margin-left: 3rem; }
  blockquote p:before {
    content: "“";
    content: open-quote; }
  blockquote p:after {
    content: "";
    content: no-close-quote; }
  blockquote p:last-of-type:after {
    content: "”";
    content: close-quote; }

q {
  quotes: "‘" "’" "“" "”";
  /**
   * If an element opens with an inline quote, let’s hang that.
   */ }
  q:before {
    content: "‘";
    content: open-quote; }
  q:after {
    content: "’";
    content: close-quote; }
  q q:before {
    content: "“";
    content: open-quote; }
  q q:after {
    content: "”";
    content: close-quote; }
  q:first-child {
    display: inline-block;
    text-indent: -0.22em; }

/*------------------------------------*\
    #TABLES
\*------------------------------------*/
/**
 * Crude table styles; tables are very difficult to keep on the baseline.
 */
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0; }

th,
td {
  padding: 12px; }

* {
  box-sizing: border-box; }

html, body {
  font-family: "Chronicle Display A", "Chronicle Display B";
  font-weight: 200;
  font-style: normal; }

h1, h2, h3,
h4, h5, h6 {
  font-family: "Landmark Regular A", "Landmark Regular B";
  font-weight: 400;
  font-style: normal; }

a {
  text-decoration: none;
  color: inherit; }
  a:hover {
    color: #ce6d7c; }

.rule {
  border: none;
  outline: none;
  height: 1px;
  background: #d9d9d9;
  /*margin: $typecsset-base-line-height 0;*/
  margin-top: 48px;
  margin-top: 3rem;
  margin-bottom: 48px;
  margin-bottom: 3rem; }

.rule--small {
  max-width: 30%;
  margin-left: auto;
  margin-right: auto; }

/******************************
* ICONS
******************************/
.icon {
  max-width: 20px;
  width: 20px;
  vertical-align: middle; }
  @media screen and (-webkit-min-device-pixel-ratio: 2) {
    .icon {
      /*width: 100px;*/ } }

/******************************
* FONT OVERRIDES
******************************/
.fun-font {
  font-family: "Landmark Inline A", "Landmark Inline B";
  font-weight: 400; }

.alpha {
  font-size: 48px; }

.mega {
  font-size: 72px; }

.giga {
  font-size: 96px; }

/**
 * Layout
 */
main {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  main:after {
    content: " ";
    display: block;
    clear: both; }

/*
* Skinny sections
******************************/
.skinny, .single-item article, .single-item header h1 {
  margin: 0 auto;
  max-width: 700px; }

/*
* Single item sections
******************************/
/*.single-item {*/
/*display: flex;*/
/*flex-direction: column;*/
/*justify-content: center;*/
/*@include breakpoint($large) {*/
/*flex-direction: row;*/
/*}*/
/*}*/
/*.single-item .aside-1,*/
/*.single-item .aside-2 {*/
/*flex-basis: 25%;*/
/*flex: 1;*/
/*margin-right: $base-spacing-unit;*/
/*order: 2;*/
/*padding: $base-spacing-unit 0;*/
/*.meta {*/
/*@include breakpoint($large) {*/
/*}*/
/*}*/
/*}*/
/*.single-item .aside-1 {*/
/*@include breakpoint($large) {*/
/*order: 1;*/
/*text-align: right;*/
/*li:after {*/
/*margin-left: auto;*/
/*}*/
/*}*/
/*}*/
/*.single-item .aside-2 {*/
/*@include breakpoint($large) {*/
/*order: 3;*/
/*}*/
/*}*/
/*.single-item__content {*/
/*flex-basis: 50%;*/
/*flex: 2;*/
/*order: 1;*/
/*@include breakpoint($large) {*/
/*order: 2;*/
/*}*/
/*}*/
.single-item {
  margin: 0 auto; }

.single-item header {
  background: rgba(217, 217, 217, 0.2);
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  margin-bottom: 24px; }
  @media screen and (min-width: 1000px) {
    .single-item header {
      -webkit-flex-direction: row;
          -ms-flex-direction: row;
              flex-direction: row; } }
  .single-item header .aside-1,
  .single-item header .aside-2 {
    -webkit-flex: 1;
        -ms-flex: 1;
            flex: 1;
    text-align: center;
    width: 100%; }
    .single-item header .aside-1 li:after,
    .single-item header .aside-2 li:after {
      margin-left: auto;
      margin-right: auto; }
      @media screen and (min-width: 1000px) {
        .single-item header .aside-1 li:after,
        .single-item header .aside-2 li:after {
          margin-left: inherit;
          margin-right: inherit; } }
    @media screen and (min-width: 1000px) {
      .single-item header .aside-1,
      .single-item header .aside-2 {
        text-align: inherit;
        width: auto; } }
  .single-item header .aside-1 {
    -webkit-order: 2;
        -ms-flex-order: 2;
            order: 2; }
    @media screen and (min-width: 1000px) {
      .single-item header .aside-1 {
        -webkit-order: 1;
            -ms-flex-order: 1;
                order: 1;
        text-align: right; }
        .single-item header .aside-1 li:after {
          margin-left: auto; } }
  .single-item header .aside-2 {
    -webkit-order: 3;
        -ms-flex-order: 3;
            order: 3; }
  .single-item header h1 {
    -webkit-flex: 2;
        -ms-flex: 2;
            flex: 2;
    margin-bottom: 0;
    -webkit-order: 1;
        -ms-flex-order: 1;
            order: 1;
    text-align: center; }
    @media screen and (min-width: 1000px) {
      .single-item header h1 {
        min-width: 700px;
        -webkit-order: 2;
            -ms-flex-order: 2;
                order: 2; } }

/**
 * Modules
 */
.grid {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  /*display: map-get($settings, display);*/ }
  .grid:after {
    content: " ";
    display: block;
    clear: both; }

@media screen and (min-width: 1000px) {
  .grid--centered .grid--left {
    text-align: right; } }

@media screen and (min-width: 1000px) {
  .grid--1-4 {
    width: 23.40426%;
    float: left;
    margin-right: 2.12766%;
    line-height: 1; } }

@media screen and (min-width: 1000px) {
  .grid--1-2 {
    width: 48.93617%;
    float: left;
    margin-right: 2.12766%;
    line-height: 1; } }

@media screen and (min-width: 1000px) {
  .grid--push-1-4 {
    margin-left: 25.53191%; } }

@media screen and (min-width: 1000px) {
  .grid--last {
    float: right;
    margin-right: 0; } }

/******************************
* $NAVIGATION
******************************/
.main-nav {
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-size: 32px;
  height: 100px;
  -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  padding-bottom: 24px; }
  @media screen and (min-width: 1000px) {
    .main-nav {
      font-size: 16px;
      height: 50px; } }
  @media screen and (min-width: 1000px) {
    .main-nav a {
      padding-left: 10px;
      padding-right: 10px;
      text-align: left;
      width: auto; } }
  .main-nav .site-logo {
    display: none;
    line-height: 100px;
    margin-right: 24px;
    text-align: center;
    /*width: $nav-height * 2;*/
    z-index: 2; }
    .main-nav .site-logo img {
      -webkit-align-self: flex-start;
          -ms-flex-item-align: start;
              align-self: flex-start; }
      @media screen and (min-width: 1000px) {
        .main-nav .site-logo img {
          max-width: 35px; } }
    @media screen and (min-width: 1000px) {
      .main-nav .site-logo {
        display: inline;
        margin-right: 0;
        padding-right: 10px;
        padding-left: 0;
        width: auto; } }
  .main-nav .main-nav__toggle {
    display: block;
    padding-right: 0;
    z-index: 2; }
    @media screen and (min-width: 1000px) {
      .main-nav .main-nav__toggle {
        display: none; } }
  .main-nav .icon {
    max-width: none;
    width: 60px; }
    @media screen and (min-width: 1000px) {
      .main-nav .icon {
        max-width: 20px; } }
  .main-nav .dropdown {
    display: none; }
    @media screen and (min-width: 1000px) {
      .main-nav .dropdown {
        display: block; } }

@media screen and (min-width: 1000px) {
  .main-nav__break-right {
    margin-left: auto; } }

.main-nav__menu {
  -webkit-animation: slide-out-to-left 300ms forwards;
          animation: slide-out-to-left 300ms forwards;
  opacity: 0; }
  @media screen and (min-width: 1000px) {
    .main-nav__menu {
      -webkit-animation: none;
              animation: none;
      display: block;
      opacity: 1; } }
  .main-nav__menu a {
    display: inline-block;
    padding: 0 24px;
    text-align: center; }
    @media screen and (min-width: 1000px) {
      .main-nav__menu a {
        padding: 0 10px;
        width: auto; } }

.main-nav__social {
  -webkit-animation: slide-up 300ms forwards;
          animation: slide-up 300ms forwards;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  opacity: 0;
  position: absolute;
  left: 24px;
  text-align: center;
  top: 124px; }
  .main-nav__social a {
    display: block;
    margin: 24px 0;
    width: auto; }
    @media screen and (min-width: 1000px) {
      .main-nav__social a {
        display: inline; } }
  @media screen and (min-width: 1000px) {
    .main-nav__social {
      -webkit-animation: none;
              animation: none;
      display: block;
      margin-left: auto;
      opacity: 1;
      position: static;
      width: auto; } }

/******************************
* OPEN NAVIGATION
******************************/
main > section {
  transition: opacity 300ms;
  z-index: 1; }

.main-nav--open .main-nav__menu {
  -webkit-animation: slide-in-from-left 200ms forwards;
          animation: slide-in-from-left 200ms forwards; }
.main-nav--open .main-nav__social {
  -webkit-animation: slide-down 300ms 200ms forwards;
          animation: slide-down 300ms 200ms forwards; }
.main-nav--open > section {
  opacity: 0.1;
  z-index: -1; }

.snippet {
  display: block;
  margin-bottom: 24px;
  text-align: center; }
  @media screen and (min-width: 1000px) {
    .snippet {
      text-align: left; } }
  .snippet .snippet__tagline {
    font-size: 18px;
    margin-bottom: 0; }
  .snippet .snippet__item {
    font-style: italic; }

.tagline {
  font-family: "Landmark Inline A", "Landmark Inline B";
  font-weight: 400;
  font-size: 36px;
  text-align: center; }
  @media screen and (min-width: 1000px) {
    .tagline {
      text-align: left; }
      .tagline .tagline__item {
        margin-bottom: 10px; } }

.avatar {
  font-size: 12.8px;
  text-align: center;
  margin-bottom: 24px; }
  @media screen and (min-width: 1000px) {
    .avatar {
      margin-bottom: auto; } }

.avatar__image {
  max-width: 50%;
  margin-bottom: 24px; }
  @media screen and (min-width: 1000px) {
    .avatar__image {
      margin-bottom: 10px;
      max-width: 90px; } }

.avatar__summary__item {
  margin-bottom: 5px; }

.avatar__summary__position {
  font-style: italic;
  font-weight: normal; }

/*------------------------------------*\
    $DROPDOWN
\*------------------------------------*/
.dropdown {
  position: relative;
  cursor: pointer; }
  .dropdown > ul {
    background: #f9f9f9;
    border-radius: 3px;
    margin: 0;
    min-width: 100px;
    padding: 0;
    right: 0; }
    @media screen and (min-width: 1000px) {
      .dropdown > ul:before, .dropdown > ul:after {
        border-top: 10px solid transparent;
        border-bottom: 10px solid #f9f9f9;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        content: "";
        display: block;
        right: 10px;
        top: -20px;
        position: absolute; } }
    .dropdown > ul:after {
      top: -21px;
      border-bottom: 10px solid #333333;
      z-index: -1; }
    @media screen and (min-width: 1000px) {
      .dropdown > ul {
        top: 175%;
        display: none;
        position: absolute;
        border: 1px solid #333333;
        white-space: nowrap; } }
    .dropdown > ul li {
      display: block; }
    .dropdown > ul a {
      display: block;
      line-height: inherit;
      text-align: right; }
      @media screen and (min-width: 1000px) {
        .dropdown > ul a {
          padding-left: 0;
          padding: 10px; }
          .dropdown > ul a:hover {
            background: #ce6d7c;
            color: #f9f9f9; } }

.dropdown:hover ul {
  display: block; }

/******************************
* TABLES!
******************************/
table {
  text-align: left; }

caption {
  font-family: "Landmark Regular A", "Landmark Regular B";
  font-size: 48px;
  margin-bottom: 24px;
  text-align: left; }

th {
  background: #ce6d7c;
  color: #f9f9f9;
  cursor: pointer;
  padding: 0;
  transition: background 200ms; }
  th a {
    cursor: pointer;
    display: block;
    padding: 10px; }
    th a:hover {
      color: #f9f9f9; }
  th:first-child {
    border-radius: 3px 0 0 0; }
  th:last-child {
    border-radius: 0 3px 0 0; }
  th:hover {
    background: #c1475a; }
    th:hover a {
      color: #f9f9f9; }

tbody {
  border-bottom: 1px solid #d9d9d9; }
  tbody tr:nth-child(2n - 1) {
    background: rgba(217, 217, 217, 0.2); }

.table-row-enter {
  opacity: 0.01;
  -webkit-transform: translate3d(-100px, 0, 0);
          transform: translate3d(-100px, 0, 0);
  transition: opacity 300ms, -webkit-transform 300ms;
  transition: opacity 300ms, transform 300ms; }

.table-row-enter.table-row-enter-active {
  opacity: 1;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0); }

.table-row-leave {
  opacity: 1;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0);
  transition: opacity 300ms, -webkit-transform 300ms;
  transition: opacity 300ms, transform 300ms; }

.table-row-leave.table-row-leave-active {
  opacity: 0.01;
  -webkit-transform: translate3d(-100px, 0, 0);
          transform: translate3d(-100px, 0, 0); }

/******************************
* ALERTS
******************************/
.alert {
  border: 1px solid #333333;
  border-radius: 3px;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin: 10px auto;
  max-width: 300px;
  text-align: center;
  transition: background 300ms, opacity 300ms, max-height 300ms; }
  .alert a {
    -webkit-align-self: center;
        -ms-flex-item-align: center;
            align-self: center;
    cursor: pointer;
    width: 100%;
    word-wrap: break-word; }
  .alert a,
  .alert img {
    min-width: 20px;
    padding: 10px; }
  .alert img {
    background: #ce6d7c; }

.alert--warning {
  background: #FFFBD3; }
  .alert--warning:hover {
    background: #fff6a0; }

.alert--error {
  background: #a53737;
  color: #f9f9f9; }

/******************************
* SUMMARY LIST
******************************/
.summary-list {
  background: rgba(217, 217, 217, 0.2);
  border-radius: 3px;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around;
  margin: 0;
  padding: 0;
  text-align: center; }
  @media screen and (min-width: 1000px) {
    .summary-list {
      -webkit-flex-direction: row;
          -ms-flex-direction: row;
              flex-direction: row; } }
  .summary-list h2 {
    font-size: 16px;
    margin-bottom: 0; }
  .summary-list li {
    -webkit-flex: 1;
        -ms-flex: 1;
            flex: 1;
    padding: 10px; }
  .summary-list p {
    margin-bottom: 0; }

/******************************
* META
******************************/
.meta {
  /*background: rgba($grey, 0.2);*/
  border-radius: 3px;
  list-style: none;
  margin: 0;
  padding: 10px; }
  .meta li:after {
    background: #d9d9d9;
    content: '';
    display: block;
    height: 1px;
    margin-top: 10px;
    margin-bottom: 10px;
    width: 30px; }

.meta__header {
  font-size: 18px;
  margin-bottom: 5px; }

.meta__value {
  font-size: 12.8px;
  font-style: italic;
  margin-bottom: 10px; }

/******************************
* SINGLE ITEM
* This is for long form items 
* as seen in a post or project
******************************/
.single-item > article > p,
.single-item > article > ul {
  font-size: 20.8px; }
.single-item img {
  max-width: 100%; }

/*

Orginal Style from ethanschoonover.com/solarized (c) Jeremy Hull
<sourdrums@gmail.com>

 */
.hljs,
pre code {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  background: #002b36;
  color: #839496;
  -webkit-text-size-adjust: none; }

code {
  background: #002b36;
  border-radius: 3px;
  color: #839396;
  display: inline-block;
  font-size: 14.4px;
  margin: 0 0.2em;
  padding: 0.2em; }

.hljs-comment,
.diff .hljs-header,
.hljs-doctype,
.hljs-pi,
.lisp .hljs-string,
.hljs-javadoc {
  color: #586e75; }

/* Solarized Green */
.hljs-keyword,
.hljs-winutils,
.method,
.hljs-addition,
.css .hljs-tag,
.hljs-request,
.hljs-status,
.nginx .hljs-title {
  color: #859900; }

/* Solarized Cyan */
.hljs-number,
.hljs-command,
.hljs-string,
.hljs-tag .hljs-value,
.hljs-rules .hljs-value,
.hljs-phpdoc,
.hljs-dartdoc,
.tex .hljs-formula,
.hljs-regexp,
.hljs-hexcolor,
.hljs-link_url {
  color: #2aa198; }

/* Solarized Blue */
.hljs-title,
.hljs-localvars,
.hljs-chunk,
.hljs-decorator,
.hljs-built_in,
.hljs-identifier,
.vhdl .hljs-literal,
.hljs-id,
.css .hljs-function {
  color: #268bd2; }

/* Solarized Yellow */
.hljs-attribute,
.hljs-variable,
.lisp .hljs-body,
.smalltalk .hljs-number,
.hljs-constant,
.hljs-class .hljs-title,
.hljs-parent,
.hljs-type,
.hljs-link_reference {
  color: #b58900; }

/* Solarized Orange */
.hljs-preprocessor,
.hljs-preprocessor .hljs-keyword,
.hljs-pragma,
.hljs-shebang,
.hljs-symbol,
.hljs-symbol .hljs-string,
.diff .hljs-change,
.hljs-special,
.hljs-attr_selector,
.hljs-subst,
.hljs-cdata,
.css .hljs-pseudo,
.hljs-header {
  color: #cb4b16; }

/* Solarized Red */
.hljs-deletion,
.hljs-important {
  color: #dc322f; }

/* Solarized Violet */
.hljs-link_label {
  color: #6c71c4; }

.tex .hljs-formula {
  background: #073642; }

/******************************
* FORMS
******************************/
form {
  width: 100%; }

.form-row {
  margin-bottom: 24px; }
  .form-row label {
    display: block;
    font-size: 36px; }
  .form-row input[type="text"],
  .form-row input[type="password"],
  .form-row textarea {
    border: 1px solid #d9d9d9;
    border-radius: 3px;
    display: block;
    font-size: 20.8px;
    font-family: "Chronicle Display A", "Chronicle Display B";
    padding: 10px;
    width: 100%; }
  .form-row textarea {
    min-height: 500px; }

.checkbox {
  position: relative; }

.checkbox input[type="checkbox"] {
  opacity: 0;
  -webkit-appearance: none;
  display: inline-block;
  vertical-align: middle;
  z-index: 100; }

.checkbox input[type="checkbox"],
.checkbox label::before {
  width: 50px;
  height: 50px;
  top: 50%;
  left: 0;
  margin-top: -25px;
  position: absolute;
  cursor: pointer;
  border-radius: 50%;
  background: #a53737; }

.checkbox label {
  display: inline-block;
  position: relative;
  padding: 0 0 0 80px;
  vertical-align: top;
  cursor: pointer;
  color: rgba(51, 51, 51, 0.7);
  transition: color 0.3s; }
  .checkbox label:before {
    content: '';
    border: 4px solid #333333;
    transition: opacity 0.3s, background 200ms; }

.checkbox
input[type="checkbox"]:checked
+ label {
  color: #333333; }

.checkbox
input[type="checkbox"]:checked
+ label::before {
  opacity: 0.8;
  background: #39ac52; }

/******************************
* TABS
******************************/
.tabs-navigation {
  box-shadow: inset 0 -2px #d9d9d9;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
          justify-content: flex-start; }
  .tabs-navigation a {
    box-shadow: inset 0 -2px #999999;
    color: #999999;
    display: block;
    -webkit-flex: 1;
        -ms-flex: 1;
            flex: 1;
    font-family: "Landmark Regular A", "Landmark Regular B";
    font-weight: 700;
    letter-spacing: 1px;
    padding: 5px 10px;
    text-align: left;
    text-transform: uppercase;
    transition: color 300ms, box-shadow 300ms; }
    .tabs-navigation a:not(.tabs-menu-item--active):hover {
      box-shadow: inset 0 -2px #333333;
      color: #333333; }
    @media screen and (min-width: 1000px) {
      .tabs-navigation a {
        max-width: 200px; } }
  .tabs-navigation .tabs-menu-item--active {
    box-shadow: inset 0 -2px #ce6d7c;
    color: #ce6d7c; }

.tab-panel {
  padding: 24px 0; }

/******************************
* TAGS
******************************/
.tag-list {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin-top: 10px; }
  .tag-list .tag {
    background: #faead4;
    border: 1px solid #333333;
    border-radius: 3px;
    cursor: pointer;
    margin-right: 10px;
    padding-right: 10px;
    transition: color 300ms, text-decoration 300ms;
    min-width: 100px; }
    .tag-list .tag:before {
      background: #333333;
      color: #f9f9f9;
      content: "×";
      display: inline-block;
      margin-right: 5px;
      padding: 0 10px; }
  .tag-list .tag--delete {
    color: #a53737;
    text-decoration: line-through; }

/******************************
* BUTTONS
******************************/
.button {
  background: #ce6d7c;
  border: 1px solid #333333;
  border-radius: 3px;
  color: #f9f9f9;
  cursor: pointer;
  font-family: "Chronicle Display A", "Chronicle Display B";
  font-size: 24px;
  outline: none;
  padding: 10px 24px;
  transition: background 300ms; }
  .button:hover {
    background: #c1475a; }

/******************************
* $CLOUD
******************************/
.cloud {
  text-align: center; }
  .cloud span {
    padding: 10px;
    word-break: break-all; }

/**
 * Page Specific
 */
.home {
  margin-top: 48px;
  margin-top: 3rem; }



/*# sourceMappingURL=data:application/json;base64, */