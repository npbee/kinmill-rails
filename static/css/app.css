@charset "UTF-8";
/**
 * Mixins
 */
/**
 * Config
 **/
/**********
* SUSY
**********/
/**********
* Breakpoints
**********/
/**********
* Typecsset
**********/
/**********
* Colors
**********/
/*****
 * Spacing
 ****/
/*****
 * Fonts
 ****/
/**
 * Reset
 */
/* http://meyerweb.com/eric/tools/css/reset/ 
v2.0 | 20110126
License: none (public domain)
 */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/** 
 * Base
 */
body {
  padding: 10px;
  background: #f9f9f9;
  color: #333333; }

/**
 * Typography
 */
/**
 * Typecsset
 *
 * Typecsset is a small, unopinionated library for creating beautifully set type
 * on the web. Typecsset gives perfect vertical rhythm at any configurable font
 * size, as well as many other typographical niceties.
 */
/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * A lot of elements in Typecsset need to share some declarations (mainly for
 * vertical rhythm), so we `@extend` some silent classes.
 */
h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

/*------------------------------------*\
    #BASE
\*------------------------------------*/
/**
 * 1. Set the base element’s `font-size` to the value of your choosing. Set in
 *    ems, assuming a browser default of 16px.
 * 2. Work out the unitless `line-height` for your project based around your
 *    desired `line-height` (defined previously in pixels), and your project’s
 *    base font size.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [2] */ }

body {
  margin: 0; }

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
h1 {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

h2 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h3 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h4 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h5 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h6 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/*------------------------------------*\
    #LISTS
\*------------------------------------*/
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    #PARAGRAPHS
\*------------------------------------*/
/**
 * Not strictly a paragraph, but probably doesn’t need its own section.
 */
/*------------------------------------*\
    #CODE
\*------------------------------------*/
/**
 * 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
 *    font-size smaller than 1em.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* [1] */ }

/*------------------------------------*\
    #QUOTES
\*------------------------------------*/
/**
 * 1. Hang the opening quote of the blockquote.
 */
blockquote {
  text-indent: -0.41em;
  /* [1] */ }

/**
 * Set up quote marks on quoting elements. This is very English-based, so we are
 * using “, ”, ‘, and ’ quotes.
 */
blockquote {
  quotes: "“" "”";
  margin-left: 48px;
  margin-left: 3rem; }
  blockquote p:before {
    content: "“";
    content: open-quote; }
  blockquote p:after {
    content: "";
    content: no-close-quote; }
  blockquote p:last-of-type:after {
    content: "”";
    content: close-quote; }

q {
  quotes: "‘" "’" "“" "”";
  /**
   * If an element opens with an inline quote, let’s hang that.
   */ }
  q:before {
    content: "‘";
    content: open-quote; }
  q:after {
    content: "’";
    content: close-quote; }
  q q:before {
    content: "“";
    content: open-quote; }
  q q:after {
    content: "”";
    content: close-quote; }
  q:first-child {
    display: inline-block;
    text-indent: -0.22em; }

/*------------------------------------*\
    #TABLES
\*------------------------------------*/
/**
 * Crude table styles; tables are very difficult to keep on the baseline.
 */
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0; }

th,
td {
  padding: 12px; }

html, body {
  font-family: "Chronicle Display A", "Chronicle Display B";
  font-weight: 300;
  font-style: normal; }

h1, h2, h3,
h4, h5, h6 {
  font-family: "Landmark Regular A", "Landmark Regular B";
  font-weight: 400;
  font-style: normal; }

a:not(.button) {
  text-decoration: none;
  color: inherit; }
  a:not(.button):hover {
    color: #ce6d7c; }

/**
 * Layout
 */
main {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  main:after {
    content: " ";
    display: block;
    clear: both; }

.skinny {
  margin: 0 auto;
  max-width: 700px; }

/**
 * Modules
 */
.grid {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  .grid:after {
    content: " ";
    display: block;
    clear: both; }
  head {
    display: block;
    position: fixed;
    right: 10px;
    top: 10px;
    z-index: 999;
    color: #333;
    background: rgba(255, 255, 255, 0.25); }
  head:before {
    content: "|||";
    display: block;
    padding: 5px 10px;
    font-family: sans-serif;
    font-size: 16px;
    font-weight: bold; }
  head:hover {
    background: rgba(255, 255, 255, 0.5);
    color: red; }
  head:hover ~ .grid, head:hover ~ body .grid {
    position: relative; }
    head:hover ~ .grid:before, head:hover ~ body .grid:before {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      content: " ";
      z-index: 998; }

@media screen and (min-width: 50em) {
  .grid--one-quarter {
    width: 23.72881%;
    float: left;
    margin-right: 1.69492%; } }

@media screen and (min-width: 50em) {
  .grid--three-quarters {
    width: 74.57627%;
    float: right;
    margin-right: 0; } }

@media screen and (min-width: 50em) {
  .grid--one-half {
    width: 49.15254%;
    float: left;
    margin-right: 1.69492%; } }

@media screen and (min-width: 50em) {
  .grid--one-half-last {
    width: 49.15254%;
    float: right;
    margin-right: 0; } }

@media screen and (min-width: 50em) {
  .grid--push-one-quarter {
    margin-left: 25.42373%; } }

.main-nav {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-bottom: 24px; }
  @media screen and (min-width: 50em) {
    .main-nav {
      justify-content: flex-start; } }
  .main-nav .site-logo {
    padding-right: 10px; }
    .main-nav .site-logo img {
      align-self: flex-start;
      max-width: 35px; }
  .main-nav .main-nav__menu {
    display: none; }
    @media screen and (min-width: 50em) {
      .main-nav .main-nav__menu {
        display: block; } }
  @media screen and (min-width: 50em) {
    .main-nav .main-nav__toggle {
      display: none; } }
  .main-nav a:not(.site-logo) {
    padding: 0 10px; }
  .main-nav .main-nav__social {
    margin-left: auto; }

.snippet {
  margin-bottom: 24px; }
  .snippet .snippet__tagline {
    font-size: 24px;
    margin-bottom: 0; }

.tagline {
  font-family: "Landmark Inline A", "Landmark Inline B";
  font-weight: 400;
  font-size: 36px;
  text-align: center; }
  @media screen and (min-width: 50em) {
    .tagline {
      text-align: left; }
      .tagline .tagline__item {
        margin-bottom: 10px; } }

.avatar {
  text-align: center;
  margin-bottom: 24px; }

.avatar__image {
  max-width: 50%;
  margin-bottom: 24px; }
  @media screen and (min-width: 50em) {
    .avatar__image {
      max-width: 100%; } }

@media screen and (min-width: 50em) {
  .avatar__summary p {
    margin-bottom: 0; } }

.avatar__summary__position {
  font-style: italic;
  font-weight: normal;
  margin-bottom: 10px; }

/**
 * Page Specific
 */
.home {
  /*text-align: center;*/ }



/*# sourceMappingURL=data:application/json;base64, */