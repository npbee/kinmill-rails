h1,h2,h3,h4,h5,h6,ul,ol,dd,p,address,pre,blockquote,table{margin:0;padding:0}h1,h2,h3,h4,h5,h6,ul,ol,dd,p,address,pre,blockquote,table{margin-bottom:30px;margin-bottom:1.5rem}html{font-size:1.25em;line-height:1.5}body{margin:0}h1{font-size:38px;font-size:1.9rem;line-height:1.57895}h2{font-size:32px;font-size:1.6rem;line-height:1.875}h3{font-size:30px;font-size:1.5rem;line-height:1}h4{font-size:26px;font-size:1.3rem;line-height:1.15385}h5{font-size:22px;font-size:1.1rem;line-height:1.36364}h6{font-size:26px;font-size:1.3rem;line-height:1.15385}ul,ol,dd{margin-left:60px;margin-left:3rem}li>ul,li>ol{margin-bottom:0}code,kbd,pre,samp{font-family:monospace, monospace}blockquote{text-indent:-0.41em}blockquote{quotes:"“" "”";margin-left:60px;margin-left:3rem}blockquote p:before{content:"“";content:open-quote}blockquote p:after{content:"";content:no-close-quote}blockquote p:last-of-type:after{content:"”";content:close-quote}q{quotes:"‘" "’" "“" "”"}q:before{content:"‘";content:open-quote}q:after{content:"’";content:close-quote}q q:before{content:"“";content:open-quote}q q:after{content:"”";content:close-quote}q:first-child{display:inline-block;text-indent:-0.22em}table{width:100%;border-collapse:collapse;border-spacing:0}th,td{padding:15px}*{box-sizing:border-box}html,body{font-family:"Chronicle Display A","Chronicle Display B";font-weight:200;font-style:normal;color:#4c4c4c}body{background:#f9f9f9;color:#4c4c4c;padding:0 20px}img{max-width:100%}h1,h2,h3,h4,h5,h6{font-family:"Landmark Regular A","Landmark Regular B";font-weight:400;font-style:normal}a{text-decoration:none;color:inherit;transition:color 200ms, border-bottom 200ms}a:hover,a.active{color:#ce6d7c}.text-link{border-bottom:2px solid #4c4c4c}.text-link:hover{border-bottom:3px solid #ce6d7c}hr{border:none;outline:none;height:1px;background:#d9d9d9;margin-top:30px;margin-bottom:30px}.rule--small{background:#4c4c4c;width:50px;margin-left:0}body{display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-height:100vh}.text-wrapper{margin:0 auto;max-width:600px}.posts{text-align:center}.posts h2{margin-bottom:5px}.posts>a{display:block;margin-bottom:20px}footer{text-align:center;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;min-height:75px;padding:20px}footer:before{transition:width 300ms,background 300ms;content:'';width:100px;height:1px;background:#d9d9d9;margin:0 auto;display:block}footer:hover:before{background:#ce6d7c;width:150px}footer .social{display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;padding:20px 0;width:100%}@media screen and (min-width: 1000px){footer .social{max-width:200px}}footer .social a{-webkit-flex:1;-ms-flex:1;flex:1}@media screen and (min-width: 1000px){footer .social a{display:inline-block}}.post header{text-align:center}.post header h1{font-family:"Landmark Inline A","Landmark Inline B";margin-bottom:5px}.post header .excerpt{font-size:24px;margin-bottom:5px}.post header em{font-size:16px}nav{margin:10px 0;padding:10px;text-align:center}nav a{display:block}.site-logo:before,.site-logo:after{color:#d9d9d9;display:inline-block;font-size:2em;padding:0 10px;transition:color 300ms;vertical-align:top}.site-logo:before{content:'\2329'}.site-logo:after{content:'\232A'}.site-logo:hover:before,.site-logo:hover:after{color:#ce6d7c}.site-logo img{max-width:50px}.avatar{text-align:center}.avatar>img{border-radius:50%;margin-bottom:10px;max-width:200px}.avatar h1{font-family:"Landmark Inline A","Landmark Inline B";font-weight:200;margin-bottom:10px}.avatar__info h2,.avatar__info p{margin-bottom:5px}.github-link img{max-width:20px}pre code{display:block;background:#2d2d2d;color:#cccccc;font-family:Menlo, Monaco, Consolas, monospace;display:block;overflow-x:auto;padding:10px 30px;color:#839496;border-radius:0;-webkit-text-size-adjust:none}code{background:#d9d9d9;border-radius:3px;padding:0 10px;display:inline-block;font-size:16px}.tomorrow-comment,pre .comment,pre .title,.hljs-comment{color:#999999}.tomorrow-red,pre .variable,pre .attribute,pre .tag,pre .regexp,pre .ruby .constant,pre .xml .tag .title,pre .xml .pi,pre .xml .doctype,pre .html .doctype,pre .css .id,pre .css .class,pre .css .pseudo{color:#f2777a}.tomorrow-orange,pre .number,pre .preprocessor,pre .built_in,pre .literal,pre .params,pre .constant{color:#f99157}.tomorrow-yellow,pre .class,pre .ruby .class .title,pre .css .rules .attribute{color:#ffcc66}.tomorrow-green,pre .string,pre .value,pre .inheritance,pre .header,pre .ruby .symbol,pre .xml .cdata{color:#99cc99}.tomorrow-aqua,pre .css .hexcolor{color:#66cccc}.tomorrow-blue,pre .function,pre .python .decorator,pre .python .title,pre .ruby .function .title,pre .ruby .title .keyword,pre .perl .sub,pre .javascript .title,pre .coffeescript .title{color:#6699cc}.tomorrow-purple,pre .keyword,pre .javascript .function{color:#cc99cc}.resume{font-family:"Chronicle Display A","Chronicle Display B"}.resume h1:first-of-type{font-size:45.6px;margin-bottom:5px}.resume h1,.resume h2,.resume h3,.resume h4,.resume h5,.resume h6{font-family:"Chronicle Display A","Chronicle Display B"}.resume h2{border-bottom:1px solid #d9d9d9;font-size:41.6px;line-height:62.4px}.resume h3{font-size:36px;line-height:36px}.resume h4{font-size:26px;line-height:26px}.resume .contact-info{list-style:none;margin:0;padding:0}.resume section{margin-bottom:40px}.resume .experience .experience__meta{font-size:18px}.resume .experience .experience__meta h3{margin-bottom:5px}.resume .experience .experience__meta p{display:inline-block;width:50%}.resume .experience .experience__meta p:first-child{font-style:italic}.resume .experience .experience__meta p:last-child{text-align:right}.resume .education p{margin-bottom:5px}


/*# sourceMappingURL=data:application/json;base64, */